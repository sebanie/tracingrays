# Test Scene 1 
# A simple quad viewed from different camera positions

size 640 480 

# Now specify the camera.  This is what you should implement.
# This file has 4 camera positions.  Render your scene for all 4.

#camera 0 0 4 0 0 0 0 1 0 30
#camera 0 -3 3 0 0 0 0 1 0 30
#camera -4 0 1 0 0 1 0 0 1 45
camera -4 -4 4 1 0 0 0 1 0 30

# lighting/material definitions
# for initial testing, you should get the geometry right
# you may want to use dummy (constant) shading, ignoring these lines

ambient .1 .1 .1
directional -.5 3 1 0 .5 1 
directional -1 0 1 1 0 0 
point 0 -2 1 0 .5 0
diffuse 1 0 0 
specular 0 0 0



  mat4 spheretransf =
    mat4(1.0, 0.0, 0.0, 0.0,
         0.0, 1.0, 0.0, 0.0,
         0.0, 0.0, 1.0, 0.0,
         0.0, 0.0, 0.0, 1.0);

  Point sphereCent = Point(0.0, 0.5, 0.5);

  Color red = Color(1.0, 0.0, 0.0);
  Color blue = Color(0.0, 0.0, 1.0);
  Color green = Color(0.0, 0.5, 0.0);
  Color black = Color(0.0, 0.0, 0.0);
  shapes->push_back(new Triangle(pt0, pt2, pt3, black, Color(.1, .1, .1), Color(.3, .3, .3), black, 1.0));
  shapes->push_back(new Triangle(pt0, pt1, pt2, black, Color(.1, .1, .1), Color(.3, .3, .3), black, 1.0));


  //shapes->push_back(new Triangle(pt4, pt6, pt7, Color(.1, .1, .1), Color(.3, .3, .3), black, 1.0));
  //shapes->push_back(new Triangle(pt4, pt5, pt6, Color(.1, .1, .1), Color(.3, .3, .3), black, 1.0));

  shapes->push_back(new Sphere(sphereCent, 0.7, black, Color(.5, .5, .5), Color(.7, .7, .7), Color(.1, .1, .1), 20.0, spheretransf));
  lights->push_back(new PointLight(green, Point(0, -2.0, 1.0)));
  lights->push_back(new DirLight(green+blue, Direction(-.5, 3.0, 1.0)));
  lights->push_back(new DirLight(red, Direction(-1.0, 0.0, 1.0)));

vertex -1 -1 0 
vertex +1 -1 0
vertex +1 +1 0
vertex -1 +1 0

tri 0 1 2
tri 0 2 3

sphere 0 0 0.5 0.7
